"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertParamsToOld = void 0;
const src_1 = require("../src");
const fs_1 = __importDefault(require("fs"));
const wrapper_1 = require("./original/wrapper");
function convertParamsToOld(params) {
    return {
        asr: params.asr.factor,
        fajr: params.fajr.degree,
        isha: toOld(params.isha),
        dhuhr: toOld(params.dhuhr),
        imsak: toOld(params.imsak),
        maghrib: toOld(params.maghrib),
        highLats: params.highLats,
        midnight: params.midnight,
    };
}
exports.convertParamsToOld = convertParamsToOld;
function toOld(o) {
    if ("minutes" in o) {
        return `${o.minutes} min`;
    }
    else
        return o.degree;
}
const citiesData = JSON.parse(fs_1.default.readFileSync("./assets/cities-all.json", "utf8"));
function getRandomLocation() {
    let longitude = Math.random() * 360 - 180, latitude = Math.random() * 180 - 90;
    if (Math.random() > 0.5) {
        const city = citiesData[Math.floor(Math.random() * citiesData.length)];
        longitude = +city.longitude;
        latitude = +city.latitude;
    }
    return {
        longitude,
        latitude,
        elevation: Math.random() > 0.9 ? undefined : Math.random() * 1000,
    };
}
function main() {
    const result = [];
    for (let i = 0; i < 10000; i++) {
        const inputs = randomInputGenerator();
        const originalOutput = (0, wrapper_1.OriginalPraytimes)({
            location: inputs.location,
            params: convertParamsToOld(inputs.params),
            date: inputs.date,
        });
        result.push({ inputs, originalOutput });
    }
    fs_1.default.writeFileSync("./assets/test-data.json", JSON.stringify(result));
}
main();
function randomInputGenerator() {
    const date = getRandomDate(new Date("1900-1-1"), new Date("2100-1-1"));
    const dateOnly = [
        date.getUTCFullYear(),
        date.getUTCMonth() + 1,
        date.getUTCDate(),
    ];
    return {
        params: Math.random() > 0.5
            ? getRandomParameters()
            : src_1.methods[getRandomMethod()],
        location: getRandomLocation(),
        date: dateOnly,
    };
}
function getRandomParameters() {
    const imsak = getRandomCalculationUnit([18, 25], [10, 20]);
    const fajr = getRandomDegrees([18, 25]);
    const dhuhr = getRandomMinutes([-4, 4]);
    const asr = getRandomAsrFactor([1, 2]);
    const maghrib = getRandomCalculationUnit([3, 5], [0, 20]);
    const isha = getRandomCalculationUnit([10, 20], [50, 120]);
    const midnight = getRandomMidnightMethod();
    const highLatitudes = getRandomHighLatsMethod();
    return {
        imsak,
        fajr,
        dhuhr,
        asr,
        maghrib,
        isha,
        midnight,
        highLats: highLatitudes,
    };
}
function getRandomCalculationUnit(degreeRange, minutesRange) {
    if (Math.random() < 0.5) {
        return getRandomDegrees(degreeRange);
    }
    else {
        return getRandomMinutes(minutesRange);
    }
}
function getRandomDegrees([min, max]) {
    return {
        degree: Math.random() * (max - min) + min,
    };
}
function getRandomMinutes([min, max]) {
    return {
        minutes: Math.random() * (max - min) + min,
    };
}
function getRandomAsrFactor([min, max]) {
    return {
        factor: Math.random() * (max - min) + min,
    };
}
function getRandomHighLatsMethod() {
    const methods = [
        "None",
        "NightMiddle",
        "OneSeventh",
        "AngleBased",
    ];
    return methods[Math.floor(Math.random() * methods.length)];
}
function getRandomMidnightMethod() {
    return Math.random() < 0.5 ? "Standard" : "Jafari";
}
function getRandomMethod() {
    const methods = [
        "MWL",
        "ISNA",
        "Egypt",
        "Makkah",
        "Karachi",
        "Tehran",
        "Jafari",
    ];
    // return "Tehran";
    return methods[Math.floor(Math.random() * methods.length)];
}
function getRandomDate(start, end) {
    const startDate = start.getTime();
    const endDate = end.getTime();
    const randomTime = Math.random() * (endDate - startDate) + startDate;
    return new Date(randomTime);
}
//# sourceMappingURL=generate-test-data.js.map