"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatTime = exports.format = void 0;
const numbers_1 = require("./utils/numbers");
function format(times, format, timezone) {
    return Object.fromEntries(Object.entries(times).map(([k, v]) => [
        k,
        formatTime(format, v, timezone),
    ]));
}
exports.format = format;
const invalidTime = "-----";
const timeSuffixes = ["AM", "PM"];
const suffixes = timeSuffixes;
function formatTime(format, t, timezone) {
    const wz = new Date(t.valueOf() + (timezone || 0) * 60 * 60 * 1000);
    let time = typeof timezone === "undefined"
        ? t.getHours() +
            t.getMinutes() / 60 +
            t.getSeconds() / 3600 +
            t.getMilliseconds() / (3600 * 1000)
        : wz.getUTCHours() +
            wz.getUTCMinutes() / 60 +
            wz.getUTCSeconds() / 3600 +
            wz.getUTCMilliseconds() / (3600 * 1000);
    if (isNaN(time))
        return invalidTime;
    if (format == "Float")
        return time;
    time = (0, numbers_1.fixHour)(time + 0.5 / 60); // add 0.5 minutes to round
    const hours = Math.floor(time);
    const minutes = Math.floor((time - hours) * 60);
    const suffix = format == "12h" ? suffixes[hours < 12 ? 0 : 1] : "";
    const hour = format == "24h" ? twoDigitsFormat(hours) : ((hours + 12 - 1) % 12) + 1;
    return `${hour}:${twoDigitsFormat(minutes)}${suffix ? " " + suffix : ""}`;
}
exports.formatTime = formatTime;
function twoDigitsFormat(num) {
    return num < 10 ? "0" + num : num;
}
//# sourceMappingURL=format.js.map