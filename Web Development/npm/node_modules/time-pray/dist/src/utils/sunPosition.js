"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sunPosition = void 0;
const DMath = __importStar(require("./degree-math"));
const numbers_1 = require("./numbers");
// compute declination angle of sun and equation of time
// Ref: http://aa.usno.navy.mil/faq/docs/SunApprox.php
function sunPosition(jd) {
    const D = jd - 2451545.0;
    const g = (0, numbers_1.fixAngle)(357.529 + 0.98560028 * D);
    const q = (0, numbers_1.fixAngle)(280.459 + 0.98564736 * D);
    const L = (0, numbers_1.fixAngle)(q + 1.915 * DMath.sin(g) + 0.02 * DMath.sin(2 * g));
    const e = 23.439 - 0.00000036 * D;
    const RA = DMath.arctan2(DMath.cos(e) * DMath.sin(L), DMath.cos(L)) / 15;
    const eqt = q / 15 - (0, numbers_1.fixHour)(RA);
    const decl = DMath.arcsin(DMath.sin(e) * DMath.sin(L));
    return { declination: decl, equation: eqt };
}
exports.sunPosition = sunPosition;
//# sourceMappingURL=sunPosition.js.map